apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'scala'

mainClassName = 'main.ParcelsizeServer'

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath ('org.junit.platform:junit-platform-gradle-plugin:1.0.0')
    }
}

apply plugin: 'java-library'
apply plugin: 'org.junit.platform.gradle.plugin'

configurations {
    gatling
}

repositories {
    mavenCentral()
}
// end::repositories[]
sourceSets
{
	 main {
        java {
            srcDirs 'src/main'
        }
    }
    test {
        java {
            srcDirs 'test'
        }

    }
    simulations {
    	//java {
          //srcDirs = ['test/scala']
        //}
        scala {
            //srcDirs = ['test/scala']
            srcDirs = ['src/gatling/simulations/performancetest']
        }
        resources {
            //srcDirs = ['resources']
            srcDirs = ['src/gatling/resources']
        }
        compileClasspath += configurations.gatling
    }
}


// tag::jar[]
jar {
    baseName = 'Parcelsize'
    version =  '0.1'
    manifest {
       attributes 'Main-Class': 'main.ParcelsizeServer'
    }

    from {
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    }
    exclude 'META-INF/*.RSA', 'META-INF/*.SF','META-INF/*.DSA'
}
// end::jar[]

/*buildscript {
  repositories {
    maven {
      url "https://plugins.gradle.org/m2/"
    }
  }
  dependencies {
    classpath 'org.junit.platform:junit-platform-gradle-plugin:1.0.0'
    classpath 'gradle.plugin.com.github.lkishalmi.gatling:gradle-gatling-plugin:3.0.2'
  }
}*/


//apply plugin: 'com.github.lkishalmi.gatling'



// tag::dependencies[]
dependencies {
	// JERSEY
	// https://mvnrepository.com/artifact/com.sun.jersey/jersey-bundle
	compile group: 'com.sun.jersey', name: 'jersey-bundle', version: '1.8'


	// ASM CORE
	// https://mvnrepository.com/artifact/asm/asm
	compile group: 'asm', name: 'asm', version: '3.3.1'

	// JSR
	// https://mvnrepository.com/artifact/org.apache.bval/bval-jsr
	compile group: 'org.apache.bval', name: 'bval-jsr', version: '1.1.1'

	// JAVA-JSON
	// https://mvnrepository.com/artifact/org.json/json
	compile group: 'org.json', name: 'json', version: '20180130'

	// JUNIT
	// https://mvnrepository.com/artifact/junit/junit
   testCompile("junit:junit:4.12")
   testRuntime("org.junit.vintage:junit-vintage-engine:4.12.0-M4")

   testCompile("org.junit.jupiter:junit-jupiter-api:5.0.0-M4")
   testRuntime("org.junit.jupiter:junit-jupiter-engine:5.0.0-M4")

   // Enable use of the JUnitPlatform Runner within the IDE
   testCompile("org.junit.platform:junit-platform-runner:1.0.0-M4")

   // Download Jackson (for JSON interaction in JAVA code)
   testCompile("org.codehaus.jackson:jackson-mapper-asl:1.9.0")

   // Download selenium plugins for UAT Tests
   compile group: 'net.bytebuddy', name: 'byte-buddy', version: '1.8.15'
   compile group: 'org.seleniumhq.selenium', name: 'selenium-java', version: '3.141.59'

   //Download phantomjs for web testing
   compile group: 'com.codeborne', name: 'phantomjsdriver', version: '1.4.4'


   	// MySQL connector
	// https://mvnrepository.com/artifact/mysql/mysql-connector-java
	compile group: 'mysql', name: 'mysql-connector-java', version: '8.0.12'


    //gatling 'org.scala-lang:scala-library:2.12.3'
    gatling 'io.gatling.highcharts:gatling-charts-highcharts:2.3.1'
    gatling 'org.scala-lang:scala-compiler:2.12.3'
    gatling "io.gatling:gatling-core:2.3.1"
    gatling "io.gatling:gatling-app:2.3.1"
    gatling "io.gatling:gatling-http:2.3.1"
    gatling "io.gatling:gatling-test-framework:2.3.1"

    compile 'org.scala-lang:scala-compiler:2.12.3'
    compile 'org.scala-lang:scala-library:2.12.3'
    compile "io.gatling:gatling-core:2.3.1"
    compile "io.gatling:gatling-app:2.3.1"
    compile "io.gatling:gatling-http:2.3.1"
    compile "io.gatling:gatling-compiler:2.3.1"
    compile "io.gatling:gatling-commons:2.3.1"
    compile "io.gatling:gatling-test-framework:2.3.1"
    compile group: 'io.gatling', name: 'jsr166e', version: '1.0' 
    // compile group: 'com.typesafe.zinc', name: 'zinc', version: '0.3.15'
    // zinc 'com.typesafe.zinc:zinc:0.3.9'


}


// end::dependencies[]

// tag::test[]
test {
    useTestNG()
    // enable JUnit Platform (a.k.a. JUnit 5) support
    //useJUnitPlatform()
	
	include '**/unit/**'
    // Always run tests, even when nothing changed.
    dependsOn 'cleanTest'

    // Show test results.
    testLogging {
        events "passed", "skipped", "failed"
    }
}

task uatTests(type: Test){
useTestNG()
//useJUnitPlatform()
exclude '**/unit/**'
}
// end::test[]

// https://www.javacodegeeks.com/2017/05/integrating-gatling-gradle-build-understanding-sourcesets-configuration.html
task gatlingRun(type: JavaExec) {
    description = "Run gatling tests"
    new File("${buildDir}/reports/gatling").mkdirs()
    classpath = sourceSets.simulations.runtimeClasspath + configurations.gatling
    main = "io.gatling.app.Gatling"
    args = ["-s", "GatlingPerformanceTest",
            "-sf", 'simulations/resources',
            "-df", 'simulations/resources',
             "-rf", "${buildDir}/reports/gatling"
    ]
}

task showConfigurations  {
    doLast {
        configurations.all { conf -> println(conf) }
    }
}

task runUATTest(type: JavaExec) {
    classpath = sourceSets.test.runtimeClasspath
    main = "test.UATTest"
}

task runIntegrationTest(type: JavaExec) {
    classpath = sourceSets.test.runtimeClasspath
    main = "test.IntegrationTest"
}
