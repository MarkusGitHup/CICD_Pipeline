node {
	stage('Preparation'){
        	git credentialsId: '6030c8a4-b481-417a-97e2-056eb153e4d9', branch: 'master', url: 'https://github.com/MarkusGitHup/CICD_Pipeline.git'   
        
    	}
    	stage('Build'){
       		dir('/var/lib/jenkins/workspace/Parcelsize-Pipeline/Parcelsize') {
       		    sh 'gradle build'
       		    sh 'docker build -t parcelsizeimage .'   
       		}
    	}
    	stage('Integration'){
        	// produktiv
        	//dir ('/var/lib/jenkins/workspace/Parcelsize-Pipeline/vagrant/prod'){
        	//testserver
               	dir ('/var/lib/jenkins/workspace/Parcelsize-Pipeline/vagrant/test'){
        	sh 'rm -rf .vagrant'
        	sh 'vagrant destroy -f'
        	sh 'vagrant up'
        	}
        	//save 
       
        	sh 'docker save -o /Asset-server/parcelsizeimage.tar parcelsizeimage'
        	sh 'docker save -o /Asset-server/databaseimage.tar databaseimage'
        	sh 'docker save -o /Asset-server/tomcatimage.tar tomcatimage'
        	    
        	//Asset-Server
        	//dir ('/var/lib/jenkins/workspace/Parcelsize-Pipeline/vagrant/asset'){
        	//sh 'rm -rf .vagrant'
        	//sh 'vagrant destroy -f'
        	//sh 'vagrant up'
        	
        	//sh 'sshpass -p vagrant scp -o StrictHostKeyChecking=no vagrant@192.168.50.4:home/frontend.tar ./'
            	//sh 'sshpass -p vagrant scp -o StrictHostKeyChecking=no vagrant@192.168.50.4:home/parcelsizeimage.tar ./'
            	//sh 'sshpass -p vagrant scp -o StrictHostKeyChecking=no vagrant@192.168.50.4:home/mysql.tar ./ '
        	
        	//sh 'sshpass -p vagrant scp -o "UserKnownHostsFile=/dev/null" -o "StrictHostKeyChecking=no" -P 22 ./js vagrant@192.168.50.4:www/ui/'
        	    
        	//sh 'vagrant ssh 6ba9f96 -c "wget -nH -r ip/ -P ./"'
        	//}


		//Asset-Server (Docker) starten

        	dir ('/var/lib/jenkins/workspace/Parcelsize-Pipeline/Asset-server'){
        	sh 'docker-compose up -d'
        	
        	}

		// JavaScript auf Asset-Server transferieren
		sh 'cp js/parcel-size.component.js /Asset-server/js/'

		// auf Testserver hochladen

		//sh 'sshpass -p vagrant scp -o "UserKnownHostsFile=/dev/null" -o "StrictHostKeyChecking=no" -P 22 ./ vagrant@192.168.50.3:/home'
        	
		sh "vagrant ssh Ubuntu-Testserver-Pipeline -c 'wget -nH -r 192.168.50.1:8085/ -P data'"

		// Docker-Images importieren
       		sh 'vagrant ssh Ubuntu-Testserver-Pipeline -c "sudo docker load -i data/docker/frontend.tar"'
       		sh 'vagrant ssh Ubuntu-Testserver-Pipeline -c "sudo docker load -i data/docker/parcelsizeimage.tar"'
		sh 'vagrant ssh Ubuntu-Testserver-Pipeline -c "sudo docker load -i data/docker/home/mysql.tar"'

		// Container starten
       		sh 'vagrant ssh Ubuntu-Testserver-Pipeline -c "sudo docker run -d --network="host" frontend.tar"'
       		sh 'vagrant ssh Ubuntu-Testserver-Pipeline -c "sudo docker run -d --network="host" parcelsizeimage.tar"'
       		sh 'vagrant ssh Ubuntu-Testserver-Pipeline -c "sudo docker run -d --network="host" mysql.tar"'

       		// Datenbankverbindung testen, sleep 30 als Timeout bis DB gestartet ist
       		sh 'vagrant ssh Ubuntu-Testserver-Pipeline -c "chmod u+x data/dbTest && sleep 30 && data/dbTest"'
	}

    	stage('UAT'){
        	//sh 'vagrant ssh Ubuntu-Testserver-Pipeline -c "sudo chmod u+x data/geckodriver"'
       		//sh 'vagrant ssh Ubuntu-Testserver-Pipeline -c "sudo rm -R -f Parcelsize"'
       		//sh 'vagrant ssh Ubuntu-Testserver-Pipeline -c "git clone https://github.com/lukwil/Parcelsize.git"'
       		//sh 'vagrant ssh Ubuntu-Testserver-Pipeline -c "cd Parcelsize/ && chmod u+x ./gradlew && ./gradlew uatTests --rerun-tasks"'

    	}
    	stage('Capacity'){
        	sh 'echo "Hello World!"'
    	}
    	stage('Manual'){
        	sh 'echo "Hello World!"'
    	}
    	stage('Release'){
        	sh 'echo "Hello World!"'
    	}
}
